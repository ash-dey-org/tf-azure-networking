name: "Terraform"

on:
  push:
    branches:
      - develop
      - test
      - uat
      - main
  pull_request:
    types: [opened, reopened]
    branches:
      - develop
      - test
      - uat
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:

  plan_dev:
    name: plan on pull request to develop branch
    if: ${{github.event.pull_request.base.ref == 'develop' && github.event_name == 'pull_request'}}

    runs-on: ubuntu-latest
    environment: dev
    env:
      deploy: dev

    # Use the Bash shell regardless of GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        working-directory: ./
        shell: bash
    steps:
      - uses: actions/checkout@v3

      - name: Log in to Azure using OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: set environment variables
        run: |
          echo "TF_WORKSPACE=${{github.event.repository.name}}-$deploy" >> $GITHUB_ENV
          echo "TF_CLOUD_ORGANIZATION=${{vars.TF_CLOUD_ORGANIZATION}}" >> $GITHUB_ENV
#          echo "ARM_CLIENT_ID=${{secrets.ARM_CLIENT_ID}}" >> $GITHUB_ENV
#          echo "ARM_SUBSCRIPTION_ID=${{secrets.ARM_SUBSCRIPTION_ID}}" >> $GITHUB_ENV
#          echo "ARM_TENANT_ID=${{secrets.ARM_TENANT_ID}}" >> $GITHUB_ENV

#          echo "TF_VAR_organization=${{vars.TF_CLOUD_ORGANIZATION}}" >> $GITHUB_ENV
#          echo "TF_VAR_project=$(cat project_name.txt)" >> $GITHUB_ENV
#          echo "TFE_TOKEN=${{secrets.TF_API_TOKEN}}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -var-file="./vars/$deploy.tfvar"
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Create Issue on Failed workflow on plan
        if: ${{ failure() }}
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: Action workflow failed.
          body: |
            ### Context
            [Failed Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            [Codebase](https://github.com/${{ github.repository }}/tree/${{ github.sha }})
            Workflow name - `${{ github.workflow }}`
            Job -           `${{ github.job }}`
            status -        `${{ job.status }}`
          assignees: ash-dey


  deploy_dev:
    name: Deploy on push to develop branch
    if: ${{github.ref == 'refs/heads/develop' && github.event_name == 'push'}}
    # needs: file_exist

    runs-on: ubuntu-latest
    environment: dev
    env:
      deploy: dev

    # Use the Bash shell regardless of GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        working-directory: ./
        shell: bash
    steps:
      - uses: actions/checkout@v3

      - name: set environment variables
        run: |
          echo "TF_WORKSPACE=${{github.event.repository.name}}-$deploy >> $GITHUB_ENV
          echo "TF_CLOUD_ORGANIZATION=${{vars.TF_CLOUD_ORGANIZATION}}" >> $GITHUB_ENV
#          echo "TF_VAR_organization=${{vars.TF_CLOUD_ORGANIZATION}}" >> $GITHUB_ENV
#          echo "TF_VAR_project=$(cat project_name.txt)" >> $GITHUB_ENV
#          echo "TFE_TOKEN=${{secrets.TF_API_TOKEN}}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -var-file="./vars/$deploy.tfvar"
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform apply
        id: apply
        run: terraform apply -auto-approve -input=false -var-file="./vars/$deploy.tfvar"
        continue-on-error: true

      - name: Terraform Apply Status
        if: steps.apply.outcome == 'failure'
        run: exit 1

      - name: Create Issue on Failed workflow on apply
        if: ${{ failure() }}
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: Action workflow failed.
          body: |
            ### Context
            [Failed Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            [Codebase](https://github.com/${{ github.repository }}/tree/${{ github.sha }})
            Workflow name - `${{ github.workflow }}`
            Job -           `${{ github.job }}`
            status -        `${{ job.status }}`
          assignees: ash-dey
